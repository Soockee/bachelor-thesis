Automatically generated by Mendeley Desktop 1.19.4
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@misc{lamport87,
abstract = {Email by Lamport containing Opinion and Definition of distributed Systems},
author = {Lamport, Leslie},
file = {:home/socke/Downloads/Lamport - 1978 - Time, Clocks, and the Ordering of Events in a Distributed System.pdf:pdf},
keywords = {Email},
mendeley-tags = {Email},
title = {{Distributed Systems Definition by Lamport}},
url = {https://lamport.azurewebsites.net/pubs/distributed-system.txt},
urldate = {2020-02-29},
year = {1987}
}
@book{Beyer2016,
author = {Beyer, B and Jones, C and Petoff, J and Murphy, N R},
isbn = {9781491929124},
publisher = {O'Reilly Media, Incorporated},
title = {{Site Reliability Engineering: How Google Runs Production Systems}},
url = {https://books.google.de/books?id=81UrjwEACAAJ},
year = {2016}
}
@inproceedings{10.5555/1251254.1251272,
address = {USA},
author = {Barham, Paul and Donnelly, Austin and Isaacs, Rebecca and Mortier, Richard},
booktitle = {Proceedings of the 6th Conference on Symposium on Operating Systems Design {\&} Implementation - Volume 6},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Barham et al. - 2004 - Using Magpie for Request Extraction and Workload Modelling.pdf:pdf},
pages = {18},
publisher = {USENIX Association},
series = {OSDI'04},
title = {{Using Magpie for Request Extraction and Workload Modelling}},
year = {2004}
}
@article{Leavitt2014,
abstract = {i Abstract Many applications today require distributed systems to store and process massive amounts of data. The complexity of these applications grows as the systems running them become more complex, and as the applications require more systems in order to run. End-to-end tracing is the process of following a request through the network of machines running one or more distributed systems in order to aid in the maintenance, debugging, and optimization of the systems. We will analyze the two primary models used for end-to-end tracing systems, the span model and the event model. We will show that spans are the less powerful model through a formal proof and a practical implementation of the proof, as well as discuss the consequences of using the span model. We will finish by proposing a joint model that incorporates both spans and events.},
author = {Leavitt, Jonathan},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Leavitt - Unknown - End-to-End Tracing Models Analysis and Unification.pdf:pdf},
journal = {D},
title = {{End-to-End Tracing Models: Analysis and Unification}},
url = {http://cs.brown.edu/{~}rfonseca/pubs/leavitt.pdf},
year = {2014}
}
@online{RedHat,
author = {{Red Hat}, Inc},
institution = {Red Hat Inc},
title = {{Was ist IT-Automatisierung?}},
url = {https://www.redhat.com/de/topics/automation/whats-it-automation}
}
@article{Shanbhag2010,
author = {Sigelman, Benjamin and Barroso, Luiz Andr{\'{e}} and Burrows, Mike and Stephenson, Pat and Plakal, Manoj and Beaver, Donald and Jaspan, Saul and Shanbhag, Chandan},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sigelman et al. - 2010 - Dapper, a Large-Scale Distributed Systems Tracing Infrastructure.pdf:pdf},
journal = {Google Techical Report dapper-2010-1},
title = {{Dapper, a Large-Scale Distributed Systems Tracing Infrastructure}},
year = {2010}
}
@inproceedings{8752866,
author = {Nedelkoski, S and Cardoso, J and Kao, O},
booktitle = {2019 19th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing (CCGRID)},
doi = {10.1109/CCGRID.2019.00038},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Nedelkoski, Cardoso, Kao - 2019 - Anomaly Detection and Classification using Distributed Tracing and Deep Learning.pdf:pdf},
issn = {null},
keywords = {Big Data;cloud computing;pattern classification;se,CNNs,GRUs,RNNs,anomaly detection,autoencoders,distributed tracing,service reliability,time series},
pages = {241--250},
title = {{Anomaly Detection and Classification using Distributed Tracing and Deep Learning}},
year = {2019}
}
@online{Watson2017,
author = {Watson, Matt},
title = {{8 Key Application Performance Metrics {\&} How to Measure Them}},
url = {https://stackify.com/application-performance-metrics/},
year = {2017}
}
@inproceedings{10.5555/1267680.1267689,
address = {USA},
author = {Reynolds, Patrick and Killian, Charles and Wiener, Janet L and Mogul, Jeffrey C and Shah, Mehul A and Vahdat, Amin},
booktitle = {Proceedings of the 3rd Conference on Networked Systems Design {\&} Implementation - Volume 3},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Reynolds et al. - 2006 - Pip Detecting the Unexpected in Distributed Systems.pdf:pdf},
pages = {9},
publisher = {USENIX Association},
series = {NSDI'06},
title = {{Pip: Detecting the Unexpected in Distributed Systems}},
year = {2006}
}
@misc{HochHamInf123,
author = {Hamburg, Hochschule f{\"{u}}r angewandte Wissenschaften},
title = {{Vorlesung Verteilte Systeme | Enhanced Reader}},
url = {moz-extension://578e9f90-238a-4d57-9101-a4e7173050a8/enhanced-reader.html?openApp{\&}pdf=https{\%}3A{\%}2F{\%}2Fusers.informatik.haw-hamburg.de{\%}2F{~}schmidt{\%}2Fvs{\%}2F01{\_}Einfuehrung.pdf},
urldate = {2020-02-29}
}
@inproceedings{10.1145/2815400.2815415,
address = {New York, NY, USA},
author = {Mace, Jonathan and Roelke, Ryan and Fonseca, Rodrigo},
booktitle = {Proceedings of the 25th Symposium on Operating Systems Principles},
doi = {10.1145/2815400.2815415},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Mace, Roelke, Fonseca - 2015 - Pivot Tracing Dynamic Causal Monitoring for Distributed Systems.pdf:pdf},
isbn = {9781450338349},
pages = {378--393},
publisher = {Association for Computing Machinery},
series = {SOSP '15},
title = {{Pivot Tracing: Dynamic Causal Monitoring for Distributed Systems}},
url = {https://doi.org/10.1145/2815400.2815415},
year = {2015}
}
@phdthesis{SCROCCA2018,
abstract = {Distributed software systems and cloud-based micro-service solutions are getting momentum. Although this paradigm-shift foster scalability, it is making architectures too complicated to maintain using traditional techniques. How to supervise such complex systems is not apparent, and industry is investigating the subject under the observability umbrella. In this thesis, we investigate observability as a research problem. First, we provide a definition that clarifies the scientific boundaries. Then we investigate the following research questions: how to expose and how to make sense of the system behaviour at runtime. In particular, in order to expose the system behaviour: (i) we employ event as a unifying data model for metrics, logs, and trace data, (ii) we explain how to map existing data formats to the proposed model, and (iii) we discuss the benefits of a unified abstraction for observability. Moreover, in order to make sense of the system behaviour: (i) we elicit a set of requirements, and (ii) we build a proof-of-concept implementing a stream processing solution that satisfies them. Notably, since the state-of-the-art already provides a stream processing solution that makes sense of metrics and logs, we focus on trace stream processing. We followed the Design Science framework to realise our proof-of-concept. I.e., we design and implement an artifact (Kaiju, a Trace Stream Processor) and we study its interactions in the addressed context (Rim, a reproducible environment capable of emulating a distributed system and its typical issues). We provide evidence of the artifact validity comparing it with state-of-the-art distributed tracing tools, and against the typical use cases for such systems recreated in Rim. Last but not least, we discuss the benefits of processing together metrics, logs and trace data. Since stream processing solutions cannot tame the heterogeneity of metrics, logs, and trace data, we employed a stream reasoning approach. In this direction, we propose an ontology to model trace data, and we report an explorative analysis of an RSP engine consuming this type of data.},
author = {SCROCCA, MARIO},
file = {:home/socke/Downloads/2018{\_}12{\_}Scrocca.pdf:pdf},
keywords = {distributed tracing,observability,stream processing,stream reasoning},
mendeley-tags = {distributed tracing,observability,stream processing,stream reasoning},
school = {Politecnico Di Milano},
title = {{Towards observability with (RDF) trace stream processing}},
url = {http://hdl.handle.net/10589/144741},
year = {2018}
}
@inproceedings{10.5555/2387880.2387910,
address = {USA},
author = {Attariyan, Mona and Chow, Michael and Flinn, Jason},
booktitle = {Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Attariyan, Chow, Flinn - 2012 - X-Ray Automating Root-Cause Diagnosis of Performance Anomalies in Production Software.pdf:pdf},
isbn = {9781931971966},
pages = {307--320},
publisher = {USENIX Association},
series = {OSDI'12},
title = {{X-Ray: Automating Root-Cause Diagnosis of Performance Anomalies in Production Software}},
year = {2012}
}
@misc{Stearns2001,
author = {Stearns, William},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Stearns - 2001 - Ngrep and regular expressions to the rescue.html:html},
howpublished = {http://www.stearns.org/},
title = {{Ngrep and regular expressions to the rescue}},
url = {http://www.stearns.org/doc/ngrep-intro.current.html},
year = {2001}
}
@article{Kaldor2017,
author = {Kaldor, J and Mace, J and Bejda, M and Gao, E and Kuropatwa, W and O'Neill, J and Ong, K Win and Schaller, B and Shan, P and Viscomi, B and Venkataraman, V and Veeraraghavan, K and Song, Y Jiun},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kaldor et al. - 2017 - Canopy An End-to-End Performance Tracing And Analysis System(2).pdf:pdf},
journal = {SOPS 2017},
title = {{Canopy: An End-to-End Performance Tracing And Analysis System}},
year = {2017}
}
@inproceedings{10.1145/2987550.2987568,
address = {New York, NY, USA},
author = {Sambasivan, Raja R and Shafer, Ilari and Mace, Jonathan and Sigelman, Benjamin H and Fonseca, Rodrigo and Ganger, Gregory R},
booktitle = {Proceedings of the Seventh ACM Symposium on Cloud Computing},
doi = {10.1145/2987550.2987568},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sambasivan et al. - 2016 - Principled Workflow-Centric Tracing of Distributed Systems.pdf:pdf},
isbn = {9781450345255},
pages = {401--414},
publisher = {Association for Computing Machinery},
series = {SoCC '16},
title = {{Principled Workflow-Centric Tracing of Distributed Systems}},
url = {https://doi.org/10.1145/2987550.2987568},
year = {2016}
}
@inproceedings{10.1145/3190508.3190526,
address = {New York, NY, USA},
author = {Mace, Jonathan and Fonseca, Rodrigo},
booktitle = {Proceedings of the Thirteenth EuroSys Conference},
doi = {10.1145/3190508.3190526},
isbn = {9781450355841},
publisher = {Association for Computing Machinery},
series = {EuroSys '18},
title = {{Universal Context Propagation for Distributed System Instrumentation}},
url = {https://doi.org/10.1145/3190508.3190526},
year = {2018}
}
@book{10.5555/1202502,
address = {USA},
author = {Tanenbaum, Andrew S and van Steen, Maarten},
isbn = {0132392275},
publisher = {Prentice-Hall, Inc.},
title = {{Distributed Systems: Principles and Paradigms (2nd Edition)}},
year = {2006}
}
@article{lamport78,
abstract = {The concept of one event happening before another in a distributed system is examined, and is shown to define a partial ordering of the events. A distributed algorithm is given for synchronizing a system of logical clocks which can be used to totally order the events. The use of the total ordering is illustrated with a method for solving synchronization problems. The algorithm is then specialized for synchronizing physical clocks, and a bound is derived on how far out of synchrony the clocks can become. {\textcopyright} 1978, ACM. All rights reserved.},
author = {Lamport, Leslie},
doi = {10.1145/359545.359563},
issn = {15577317},
journal = {Communications of the ACM},
keywords = {clock synchronization,computer networks,distributed systems,multiprocess systems},
month = {jul},
number = {7},
pages = {558--565},
title = {{Time, Clocks, and the Ordering of Events in a Distributed System}},
volume = {21},
year = {1978}
}
@article{Stocia2007,
author = {Fonseca, R and Porter, G and Katz, R and Shenker, S and Stocia, I},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Fonseca et al. - 2007 - X-Trace A Pervasive Network Tracing Framework.pdf:pdf},
journal = {Proceedings of USENIX NSDI},
title = {{X-Trace: A Pervasive Network Tracing Framework}},
year = {2007}
}
@article{Narayanan2003,
author = {Barham, P and Isaacs, R and Moertier, R and Narayanan, D},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Barham et al. - 2003 - Magpie online modelling and performance-aware systems.pdf:pdf},
journal = {Proceedings of USENIX HotOS IX},
title = {{Magpie: online modelling and performance-aware systems}},
year = {2003}
}
@online{opentracing,
author = {OpenTracting},
file = {:home/socke/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - 2019 - opentracing trace overview figure.png:png},
title = {opentracing trace overview figure},
url = {https://opentracing.io/docs/overview/},
year = {2019}
}
